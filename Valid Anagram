Leetcode Link --> https://leetcode.com/problems/valid-anagram/description/

Problem: Valid Anagram
Given two strings s and t, determine if t is an anagram of s. An anagram is a word formed by rearranging the letters of a different word using all the original letters exactly once.

Brute Force Approach
Approach:

Check if the lengths of both strings are equal. If not, they can't be anagrams.
Sort both strings.
Compare the sorted strings. If they are identical, then t is an anagram of s.
C++ Code (Brute Force)

#include <iostream>
#include <algorithm>  // For sort()

bool isAnagramBruteForce(std::string s, std::string t) {
    // Step 1: Check if lengths are different
    if (s.length() != t.length()) {
        return false;
    }

    // Step 2: Sort both strings
    std::sort(s.begin(), s.end());
    std::sort(t.begin(), t.end());

    // Step 3: Compare sorted strings
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] != t[i]) {
            return false;
        }
    }

    return true;
}

int main() {
    std::string s = "listen";
    std::string t = "silent";

    if (isAnagramBruteForce(s, t)) {
        std::cout << "Yes, it is an anagram!" << std::endl;
    } else {
        std::cout << "No, it is not an anagram." << std::endl;
    }

    return 0;
}

Dry Run (Brute Force)

For s = "listen" and t = "silent":
Length check: Both strings have length 6.

Sorting:
s becomes "eilnst"
t becomes "eilnst"

Comparison:
Both sorted strings are identical.
Result: true (It's an anagram).

Optimized Approach
Approach: If lengths differ, they can't be anagrams.

Use an array of size 26 (for each alphabet) to count occurrences of each character in s and decrease for t.
If all counts are zero at the end, they are anagrams.
C++ Code (Optimized)

#include <iostream>
#include <vector>

bool isAnagramOptimized(std::string s, std::string t) {
    // Step 1: Check if lengths are different
    if (s.length() != t.length()) {
        return false;
    }

    // Step 2: Create a frequency array of size 26
    std::vector<int> charCount(26, 0);

    // Step 3: Update the frequency array
    for (int i = 0; i < s.length(); ++i) {
        charCount[s[i] - 'a']++;
        charCount[t[i] - 'a']--;
    }

    // Step 4: Check if all counts are zero
    for (int i = 0; i < 26; ++i) {
        if (charCount[i] != 0) {
            return false;
        }
    }

    return true;
}

int main() {
    std::string s = "listen";
    std::string t = "silent";

    if (isAnagramOptimized(s, t)) {
        std::cout << "Yes, it is an anagram!" << std::endl;
    } else {
        std::cout << "No, it is not an anagram." << std::endl;
    }

    return 0;
}

Dry Run (Optimized)
For s = "listen" and t = "silent":
Length check: Both strings have length 6.

Frequency array update:
After processing: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
All counts are zero, so they are anagrams.

Conclusion
Brute Force: Simple but inefficient with a time complexity of O(n log n) due to sorting.
Optimized: Efficient with a time complexity of O(n) using a frequency array. This approach is preferable for larger strings.
